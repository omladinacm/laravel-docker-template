#!/usr/bin/env bash

#By default, verbose output is not enabled
verbose=0

if [[ -z "${ENVIRONMENT}" ]]; then
  ENVIRONMENT=local
fi

for i in "$@"
do
  case ${i} in
    -e=*|--environment=*)
      ENVIRONMENT="${i#*=}"
      shift # past argument=value
      ;;
    -m=*|--method=*)
      method="${i#*=}"
      shift # past argument=value
      ;;
    -v)
      verbose=1
      shift
      ;;
    -ac=*|--artisan=*)
      artisan_command="${i#*=}"
      shift
      ;;
    -cc=*|--composer=*)
      composer_command="${i#*=}"
      shift
      ;;
    -nc=*|--npm=*)
      npm_command="${i#*=}"
      shift
      ;;
    -sn=*|--seeder=*)
      seed_name="${i#*=}"
      ;;
    *)
      # unknown option, ignore it
    ;;
  esac
done

return_check()
{
  if [[ $1 != 0 ]]; then
    echo "Error occurred, returned code $1"
  else
    echo "done"
  fi
}

replace_env_values()
{
  local DOCKER_ENV=$1
  local LARAVEL_ENV=$2

  local APP_ENV
  local DB_HOST
  local DB_PORT
  local DB_DATABASE
  local DB_USERNAME
  local DB_PASSWORD

  APP_ENV=$(grep -Po '(?<=^APP_ENV=)\w*' "${DOCKER_ENV}")
  DB_HOST=$(grep -Po '(?<=^DB_HOST=)\w*' "${DOCKER_ENV}")
  DB_PORT=$(grep -Po '(?<=^DB_PORT=)\w*' "${DOCKER_ENV}")
  DB_DATABASE=$(grep -Po '(?<=^DB_DATABASE=)\w*' "${DOCKER_ENV}")
  DB_USERNAME=$(grep -Po '(?<=^DB_USERNAME=)\w*' "${DOCKER_ENV}")
  DB_PASSWORD=$(grep -Po '(?<=^DB_PASSWORD=)\w*' "${DOCKER_ENV}")
  sed -i "s/\(^APP_ENV=\).*/\APP_ENV=${APP_ENV}/" "${LARAVEL_ENV}"
  sed -i "s/\(^DB_HOST=\).*/\DB_HOST=${DB_HOST}/" "${LARAVEL_ENV}"
  sed -i "s/\(^DB_PORT=\).*/\DB_PORT=${DB_PORT}/" "${LARAVEL_ENV}"
  sed -i "s/\(^DB_DATABASE=\).*/\DB_DATABASE=${DB_DATABASE}/" "${LARAVEL_ENV}"
  sed -i "s/\(^DB_USERNAME=\).*/\DB_USERNAME=${DB_USERNAME}/" "${LARAVEL_ENV}"
  sed -i "s/\(^DB_PASSWORD=\).*/\DB_PASSWORD=${DB_PASSWORD}/" "${LARAVEL_ENV}"
}

env_create()
{
  local LARAVEL_ENV=src/.env
  local DOCKER_ENV=.env

  if [[ ! -f "$LARAVEL_ENV" ]]; then
    cp src/.env.example src/.env

    # shellcheck disable=SC2162
    read -p $"Do you want to replace environment and DB connection data in Laravel .env file from Docker .env file? " answer

    if [[ "${answer}" == "Y" || "${answer}" == "y" ]]; then
      replace_env_values ${DOCKER_ENV} ${LARAVEL_ENV}
    fi
  else
    echo $".env file already exists"
    # shellcheck disable=SC2162
    read -p $"Do you want to replace environment and DB connection data in Laravel .env file from Docker .env file? " answer

    if [[ "${answer}" == "Y" || "${answer}" == "y" ]]; then
      replace_env_values ${DOCKER_ENV} ${LARAVEL_ENV}
    fi
  fi
}

docker_compose_up()
{
  echo "Bringing up the environment ... "
  if [ ! -d "logs/php" ]; then
    mkdir -p logs/php
  fi
  touch logs/php/fpm-error.log
  touch logs/php/cli-error.log
  if [[ ${verbose} == 1 ]]; then
    docker-compose up -d nginx
  else
    docker-compose up -d nginx &> /dev/null
  fi

  return_check $?
}

docker_compose_down()
{
  echo "Bringing down the environment ... "
  if [[ ${verbose} == 1 ]]; then
    docker-compose down
  else
    docker-compose down &> /dev/null
  fi

  return_check $?
}

docker_exec()
{
  docker exec -it php $1
}

artisan()
{
  docker-compose run --rm artisan $1

  return_check $?
}


artisan_up()
{
  echo "Bringing application online ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "up"
  else
    artisan "up" &> /dev/null
  fi

  return_check $?
}

artisan_down()
{
  echo "Shutting down application ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "down"
  else
    artisan "down" &> /dev/null
  fi

  return_check $?
}

migrate()
{
  echo "Executing available migrations ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "migrate"
  else
    artisan "migrate" &> /dev/null
  fi

  return_check $?
}

migrate_fresh()
{
  echo "Executing all migrations from beginning with seeders ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "migrate:fresh --seed"
  else
    artisan "migrate:fresh --seed" &> /dev/null
  fi

  return_check $?
}

seed()
{
  echo "Executing $1 ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "db:seed --class=$1"
  else
    artisan "db:seed --class=$1" &> /dev/null
  fi

  return_check $?
}

seed_all()
{
  echo "Executing all seeders ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "db:seed"
  else
    artisan "db:seed" &> /dev/null
  fi

  return_check $?
}

cache_clear()
{
  echo "Clearing application cache ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "cache:clear"
  else
    artisan "cache:clear" &> /dev/null
  fi

  return_check $?
}

config_cache()
{
  echo "Caching configuration ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "config:cache"
  else
    artisan "config:cache" &> /dev/null
  fi

  return_check $?
}

config_clear()
{
  echo "Clearing configuration cache ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "config:clear"
  else
    artisan "config:clear" &> /dev/null
  fi

  return_check $?
}

route_cache()
{
  echo "Caching routes ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "route:cache"
  else
    artisan "route:cache" &> /dev/null
  fi

  return_check $?
}

route_clear()
{
  echo "Clearing route cache ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "route:clear"
  else
    artisan "route:clear" &> /dev/null
  fi

  return_check $?
}

view_clear()
{
  echo "Clearing rendered views ... "
  if [[ ${verbose} == 1 ]]; then
    artisan "view:clear"
  else
    artisan "view:clear" &> /dev/null
  fi

  return_check $?
}

composer()
{
  docker-compose run --rm composer $1

  return_check $?
}

composer_install()
{
  echo "Running composer install ... "
  if [[ ${verbose} == 1 ]]; then
    if [[ ${ENVIRONMENT} == "production" ]]; then
      composer "install --no-dev"
    else
      composer "install"
    fi
  else
    if [[ ${ENVIRONMENT} == "production" ]]; then
      composer "install --no-dev" &> /dev/null
    else
      composer "install" &> /dev/null
    fi
  fi

  return_check $?
}

composer_update()
{
  echo "Running composer update ... "
  if [[ ${verbose} == 1 ]]; then
    if [[ ${ENVIRONMENT} == "production" ]]; then
      composer "update --no-dev"
    else
      composer "update"
    fi
  else
    if [[ ${ENVIRONMENT} == "production" ]]; then
      composer "update --no-dev" &> /dev/null
    else
      composer "update" &> /dev/null
    fi
  fi

  return_check $?
}

composer_require()
{
  if [[ ${verbose} == 1 ]]; then
    composer "require $1"
  else
    composer "require $1" &> /dev/null
  fi

  return_check $?
}

composer_require_dev()
{
  if [[ ${verbose} == 1 ]]; then
    composer "require --dev $1"
  else
    composer "require --dev $1" &> /dev/null
  fi

  return_check $?
}

composer_dump_autoload()
{
  if [[ ${verbose} == 1 ]]; then
    composer "dump-autoload -o"
  else
    composer "dump-autoload -o" &> /dev/null
  fi

  return_check $?
}

npm()
{
  docker-compose run --rm npm $1
}

npm_install()
{
  if [[ ${verbose} == 1 ]]; then
    npm "install"
  else
    npm "install" &> /dev/null
  fi

  return_check $?
}

npm_run()
{
  if [[ ${verbose} == 1 ]]; then
    if [[ ${ENVIRONMENT} == "production" ]]; then
      npm "run prod"
    else
      npm "run dev"
    fi
  else
    if [[ ${ENVIRONMENT} == "production" ]]; then
      npm "run prod" &> /dev/null
    else
      npm "run dev" &> /dev/null
    fi
  fi

  return_check $?
}

load()
{
    docker_compose_up
    artisan_up
}

unload()
{
    artisan_down
    docker_compose_down
}

helper()
{
  echo $""
  echo $"Usage: $0 args [options]"
  echo $"   $0 -m=setup [-v]"
  echo $""
  echo $"Available arguments:"
  echo $""
  echo $"   -m, --method      Method to be executed, listed below"
  echo $"   -e, --environment Custom environment setting (if env variable not set)"
  echo $"   -h, --help        Shows this :)"
  echo $""
  echo $"Available methods:"
  echo $""
  echo $"   env_create                Creates .env file from .env.example if it doesn't exist"
  echo $"   exec                      Execs into PHP Docker container"
  echo $"   load                      Bring up the environment"
  echo $"   unload                    Bring down the environment"
  echo $"   reload                    Reload the environment (basically two upper commands in one)"
  echo $"   artisan                   Execute any artisan command (must use -ac option)"
  echo $"   artisan_up                Execute artisan up command"
  echo $"   artisan_down              Execute artisan down command"
  echo $"   migrate                   Execute artisan migrate command"
  echo $"   migrate_fresh             Execute artisan \"migrate:fresh --seed\" command"
  echo $"   seed                      Execute specific seeder class, uses -sn option"
  echo $"   seed_all                  Execute all seeders"
  echo $"   cache_clear               Clears Laravel application cache"
  echo $"   config_cache              Caches application configuration"
  echo $"   config_clear              Clears cached application configuration"
  echo $"   routes_cache              Caches routes"
  echo $"   routes_clear              Clears route cache"
  echo $"   view_clear                Clears rendered views cache"
  echo $"   composer                  Execute any composer command (must use -cc option)"
  echo $"   composer_install          Execute composer install"
  echo $"   composer_update           Execute composer update"
  echo $"   composer_require          Adds required package through composer, uses -cc option"
  echo $"   composer_require_dev      Adds required development package through composer, uses -cc option"
  echo $"   dump_autoload             Execute composer optimized dump-autoload"
  echo $"   npm                       Execute any npm command (must use -nc option)"
  echo $"   npm_install               Execute npm install command"
  echo $"   npm_run                   Execute npm run (dev or prod, depending on environment variable) command"
  echo $""
  echo $"Available options:"
  echo $""
  echo $"   -v                        Verbose mode"
  echo $""
  echo $"   -ac=, --artisan=\"artisan command\"           Custom artisan command to be executed"
  echo $"   -cc=, --composer=\"composer command\"         Custom composer command to be executed"
  echo $"   -nc=, --npm=\"npm command\"                   Custom npm command to be executed"
  echo $""
}

if [[ $1 == "--help" || $1 == "-h" ]]; then
  helper
fi

case "${method}" in
  env_create)
    env_create
    ;;
  exec)
    docker_exec bash
    ;;
  load)
    load
    ;;
  unload)
    unload
    ;;
  reload)
    unload
    load
    ;;
  artisan)
    artisan "${artisan_command}"
    ;;
  artisan_up)
    artisan_up
    ;;
  artisan_down)
    artisan_down
    ;;
  migrate)
    migrate
    ;;
  migrate_fresh)
    migrate_fresh
    ;;
  seed)
    seed "${seed_name}"
    ;;
  seed_all)
    seed_all
    ;;
  cache_clear)
    cache_clear
    ;;
  config_cache)
    config_cache
    ;;
  config_clear)
    config_clear
    ;;
  route_cache)
    route_cache
    ;;
  route_clear)
    route_clear
    ;;
  view_clear)
    view_clear
    ;;
  composer)
    composer "${composer_command}"
    ;;
  composer_install)
    composer_install
    ;;
  composer_update)
    composer_update
    ;;
  composer_require)
    composer_require "${composer_command}"
    ;;
  composer_require_dev)
    composer_require_dev "${composer_command}"
    ;;
  dump_autoload)
    composer_dump_autoload
    ;;
  npm)
    npm "${npm_command}"
    ;;
  npm_install)
    npm_install
    ;;
  npm_run)
    npm_run
    ;;
  *)
    echo $""
    echo $"Run \"$0 --help\" to get list of commands"
    echo $""
    exit 1
esac
